//apply plugin: 'com.android.application'
/**
 * 打包处理：
 * 1、注释掉 apply plugin: 'com.android.application'
 * 2、注释掉 applicationId "com.qudoufeng.vehiclesdk"
 * 3、反注释下面的 apply plugin: 'com.android.library', apply plugin: 'com.cpdroid.fat-aar' 注释掉manifest里面掉name，theme，intent-filter
 * 4、点击Build->Make Module app,aar包输出在 app->build->outputs->aar
 * https://blog.csdn.net/sziitjin/article/details/96433836?depth_1-utm_source=distribute.pc_relevant.none-task&utm_source=distribute.pc_relevant.none-task
 fataar打包工具：不再使用该工具，该工具会把依赖包强制展开，比如qiniu依赖json，项目也依赖json，就会打包2个版本的json，导致编译错误
 https://github.com/cpdroid/fat-aar/blob/master/README_CN.md

 jcenter 如何同步： https://bintray.com/
 https://www.jianshu.com/p/275fc9d54e4a
 ./gradlew clean
 ./gradlew install
 ./gradlew bintrayUpload
 如何隐藏源码：https://blog.csdn.net/u013904672/article/details/76999701
 */
apply plugin: 'com.android.library'

//添加这两行
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'

android {
    compileSdkVersion 28
    defaultConfig {
        //applicationId "com.qudoufeng.vehiclesdk"
        minSdkVersion 23
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        renderscriptSupportModeEnabled true
        multiDexEnabled true

        externalNativeBuild {
            ndk {
                abiFilters "armeabi-v7a", "arm64-v8a"
            }
        }
    }
    buildTypes {
        release {
            // 混淆
            minifyEnabled true
            // Zipalign优化
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    externalNativeBuild {
        cmake {
            path file('CMakeLists.txt')
        }
    }
    sourceSets {
        main {
            java.srcDirs = ['jcenter_src','src/main/java']
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation 'com.android.support:recyclerview-v7:28.0.0'
    implementation 'com.android.support:multidex:1.0.3'

    implementation 'com.google.dagger:dagger:2.11'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.11'

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    //播放器
    implementation 'tv.danmaku.ijk.media:ijkplayer-java:0.8.8'
    implementation 'tv.danmaku.ijk.media:ijkplayer-armv7a:0.8.8'
    implementation 'tv.danmaku.ijk.media:ijkplayer-arm64:0.8.8'

    ///////////////////////// demo工程使用
    implementation 'com.tencent:mmkv-static:1.0.24'
    implementation 'org.greenrobot:eventbus:3.1.1'
    //implementation 'com.qiniu:qiniu-android-sdk:7.3.3'

    implementation 'io.reactivex:rxjava:1.3.0'
    implementation 'io.reactivex:rxandroid:1.1.0'
    implementation 'com.squareup.retrofit2:retrofit:2.6.2'
    implementation 'com.squareup.retrofit2:converter-gson:2.6.2'
    implementation 'com.squareup.retrofit2:adapter-rxjava:2.6.2'

    implementation 'com.liulishuo.filedownloader:library:1.7.6'

}

//项目主页
def siteUrl = 'https://github.com/thinkbig/qudoufengsdk'
//项目的git地址
def gitUrl = 'https://github.com/thinkbig/qudoufengsdk.git'
//发布到JCenter上的项目名字
def libName = "qdfsdklib"

//发布到组织名称名字，必须填写
group = "com.qudoufeng.qdfsdk"
// 版本号，下次更新是只需要更改版本号即可
version = "1.0.0"
//上面配置后上传至JCenter后的编译路径是这样的： compile 'com.qudoufeng.qdfsdk:library:1.0.0'

//////////////////////////////////////////////////这部分代码为是否要生成源码以及javadoc，不需要刻意注释掉
// 生成jar包的task，不需要修改。
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs[0]
    classifier = 'sources'
}
// 生成jarDoc的task，不需要修改。
task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs[0]
    classpath += configurations.compile
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    failOnError false // 忽略注释语法错误，如果用jdk1.8你的注释写的不规范就编译不过。
}
// 生成javaDoc的jar，不需要修改。
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
artifacts {
    archives javadocJar
    archives sourcesJar
}
//////////////////////////////////////////////////这部分代码为是否要生成源码以及javadoc，不需要刻意注释掉


//上传到JCenter所需要的源码文件
artifacts {
    archives javadocJar
    archives sourcesJar
}

// 配置maven库，生成POM.xml文件
install {
    repositories.mavenInstaller {
        // This generates POM.xml with proper parameters
        pom {
            project {
                packaging 'aar'
                //项目描述，随意填
                name 'QuDoufeng Sdk'
                url siteUrl
                licenses {
                    license {
                        //开源协议
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        //开发者的个人信息
                        id 'thinkbig'
                        name 'qudoufeng'
                        email 'developer@carmap.me'
                    }
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl
                }
            }
        }
    }
}

//上传到JCenter
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

bintray {
    user = properties.getProperty("bintray.user")    //读取 local.properties 文件里面的 bintray.user
    key = properties.getProperty("bintray.apikey")   //读取 local.properties 文件里面的 bintray.apikey
    configurations = ['archives']
    pkg {
        //这里的repo值必须要和你创建Maven仓库的时候的名字一样
        repo = "qdfsdk"
        //发布到JCenter上的项目名字
        name = libName
        //项目描述
        desc = 'Qudoufeng Sdk'
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = ["Apache-2.0"]
        publish = true
    }
}

javadoc {
    options{
        //如果你的项目里面有中文注释的话，必须将格式设置为UTF-8，不然会出现乱码
        encoding "UTF-8"
        charSet 'UTF-8'
        author true
        version true
        links "http://docs.oracle.com/javase/7/docs/api"
    }
}

